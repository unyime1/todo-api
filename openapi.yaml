openapi: 3.0.0
info:
  version: 1.0.0
  title: Todo API
  description: A very simple todo API
  
servers:
  - url: http://127.0.0.1:8000
      
paths:
  /users/register/:
    post:
      description: Create a user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Registration' 
      responses:
        201:
          description: Registration successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Registration'        
  
  /users/login/:
    post:
      description: Authenticate user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  example: effiong@ewa.io
                password:
                  type: string
                  example: testing45658937
      responses:
        201:
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  email:
                    type: string
                    example: effiong@ewa.io
                  first_name:
                    type: string
                    example: Effiong
                  last_name:
                    type: string
                    example: Ewa
                  token:
                    type: string
                    example: y763467-duiu87585-dji8945-985ehdh
        
        400:
          description: Invalid request
          content:
            application/json:
              schema:
                type: object
                properties:   
                  message:
                    type: string
           
                    
                    
  /todo/{email}/create/:
    post:
      security:
        - bearerAuth: []
      description: Create a todo for a user
      parameters:
        - name: email
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Todo'    
      
      responses:
        201:
          description: Todo Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Todo'  
        
        400:
          description: Invalid request
          content:
            application/json:
              schema:
                type: object
                properties:   
                  message:
                    type: string
                    
                    
  /todo/{user_email}/:
    get:
      security:
        - bearerAuth: []
      description: Get a user's todo list
      parameters:
        - name: user_email
          in: path
          example: test@test.com
          required: true
          schema:
            type: string
      
      responses:
        201:
          description: Todo Retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TodoGetArray'  
        
        400:
          description: Invalid request
          content:
            application/json:
              schema:
                type: object
                properties:   
                  message:
                    type: string
                    
                    
                    
  /todo/{user_email}/{todo_code}/:
    get:
      security:
        - bearerAuth: []
      description: Get a specific todo
      parameters:
        - name: user_email
          example: test@test.com
          in: path
          required: true
          schema:
            type: string
        - name: todo_code
          example: jfuh-8yhsh-sj44-sjs4
          in: path
          required: true
          schema:
            type: string
      
      responses:
        201:
          description: Todo Retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TodoGetDetail'  
        
        400:
          description: Invalid request
          content:
            application/json:
              schema:
                type: object
                properties:   
                  message:
                    type: string
                    
                    
                    
  /todo/{user_email}/{todo_code}/update/:
    put:
      security:
        - bearerAuth: []
      description: Update a specific todo
      parameters:
        - name: user_email
          example: test@test.com
          in: path
          required: true
          schema:
            type: string
        - name: todo_code
          example: jfuh-8yhsh-sj44-sjs4
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Todo' 
      
      responses:
        201:
          description: Update successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Todo'  
        
        400:
          description: Invalid request
          content:
            application/json:
              schema:
                type: object
                properties:   
                  message:
                    type: string
  
  
  /todo/{user_email}/{todo_code}/delete/:
    delete:
      security:
        - bearerAuth: []
      description: Delete a specific todo
      parameters:
        - name: user_email
          example: test@test.com
          in: path
          required: true
          schema:
            type: string
        - name: todo_code
          example: jfuh-8yhsh-sj44-sjs4
          in: path
          required: true
          schema:
            type: string
      
      responses:
        201:
          description: Delete successful
          content:
            application/json:
              schema:
                type: object
                properties:   
                  message:
                    type: string
        
        400:
          description: Invalid request
          content:
            application/json:
              schema:
                type: object
                properties:   
                  message:
                    type: string
                        
                        
  /todo/:
    get:
      security:
        - bearerAuth: []
      description: Get a user's todo list
      
      responses:
        201:
          description: Todo Retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TodoGetArray'  
        
        400:
          description: Invalid request
          content:
            application/json:
              schema:
                type: object
                properties:   
                  message:
                    type: string
                    
    post:
      security:
        - bearerAuth: []
      description: Create a todo for a user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Todo'    
      
      responses:
        201:
          description: Todo Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Todo'  
        
        400:
          description: Invalid request
          content:
            application/json:
              schema:
                type: object
                properties:   
                  message:
                    type: string
                    
                    
  /todo_detail/{todo_code}/:
    get:
      security:
        - bearerAuth: []
      description: Get a specific todo
      parameters:
        - name: todo_code
          example: jfuh-8yhsh-sj44-sjs4
          in: path
          required: true
          schema:
            type: string
      
      responses:
        201:
          description: Todo Retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TodoGetDetail'  
        
        400:
          description: Invalid request
          content:
            application/json:
              schema:
                type: object
                properties:   
                  message:
                    type: string
                    
    put:
      security:
        - bearerAuth: []
      description: Update a specific todo
      parameters:
        - name: todo_code
          example: jfuh-8yhsh-sj44-sjs4
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Todo' 
      
      responses:
        201:
          description: Update successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Todo'  
        
        400:
          description: Invalid request
          content:
            application/json:
              schema:
                type: object
                properties:   
                  message:
                    type: string
                    
    delete:
      security:
        - bearerAuth: []
      description: Delete a specific todo
      parameters:
        - name: todo_code
          example: jfuh-8yhsh-sj44-sjs4
          in: path
          required: true
          schema:
            type: string
      
      responses:
        201:
          description: Delete successful
          content:
            application/json:
              schema:
                type: object
                properties:   
                  message:
                    type: string
        
        400:
          description: Invalid request
          content:
            application/json:
              schema:
                type: object
                properties:   
                  message:
                    type: string
    
  
                    
                    
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: Token
  
  schemas:
    Registration:
      type: object
      required:
        - first_name
        - last_name
        - email
        - password
      properties:
        first_name:
          type: string
          example: Effiong
        last_name:
          type: string
          example: Ewa
        email:
          type: string
          example: effiong@ewa.io
        password:
          type: string
          example: testing45658937
          
    Todo:
      type: object
      required:
        - title
        - description
      properties:
        title:
          type: string
          example: test
        description:
          type: string
          example: My test todo
          
    TodoGetArray:
      type: array
      items:
        properties:
          title:
            type: string
            example: test
          description:
            type: string
            example: My test todo
          code:
            type: string
            example: jfuh-8yhsh-sj44-sjs4
          done:
            type: boolean
            example: False
          date_created:
            type: string
            example: 2021-07-0713:00:18.259396
          user:
            type: object
            properties:
              email:
                type: string
                example: test@test.com
              first_name:  
                type: string
                example: Test
              last_name:
                type: string
                example: Test
              
    
    TodoGetDetail:
      type: object
      properties:
        title:
          type: string
          example: test
        description:
          type: string
          example: My test todo
        code:
          type: string
          example: jfuh-8yhsh-sj44-sjs4
        done:
          type: boolean
          example: False
        date_created:
          type: string
          example: 2021-07-0713:00:18.259396
        user:
          type: object
          properties:
            email:
              type: string
              example: test@test.com
            first_name:  
              type: string
              example: Test
            last_name:
              type: string
              example: Test
        